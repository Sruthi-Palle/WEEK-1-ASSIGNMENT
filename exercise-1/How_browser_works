working of the BROWSER:

Introduction:

➡️The main essence of the discussion is to explain how browser works when a user enters an url

➡️Major browsers like Chrome, Firefox and Safari make up around 71% of global desktop browser usage.

After reading the following explanation one will be able understand

➡️Under the hood understanding of how a browser works.

➡️What are the features a browser provides?

➡️What a browser is capable of doing.

➡️How a web page is translated from a string in a URL to a webpage

Structure of the discussion is as follows:

➡️main functionality of the browser.

➡️High Level Components of a browser.

➡️Rendering engine and its use.

➡️Parsers (HTML, CSS, etc)

➡️Script Processors

➡️Tree construction

➡️Order of script processing

➡️Layout and Painting

1)Main functionality of the browser:

➡️The main function of the web browser is to present the web resource associated with the URL(Uniform Resource Locator) entered by client.

➡️It presents required web page by sending request to the server. The server then sends response in the format of HTML,png,json etc

➡️browser interprets and displays HTML files according to HTML,CSS specifications maintained by W3C (World Wide Web Consortium) organization

![how-web-browsers-work](https://user-images.githubusercontent.com/109233287/192463674-8866d986-8365-477b-bc2e-c33d44cbe4ba.png)

2)High Level Components of a browser:

The user interface:

➡️this includes the address bar, back/forward button, bookmarking menu, etc. Every part of the browser display except the window where you see the requested page.

The browser engine:

➡️marshals actions between the UI and the rendering engine.

The rendering engine:

➡️responsible for displaying requested content. For example if the requested content is HTML, the rendering engine parses HTML and CSS, and displays the parsed content on the screen.

Networking:

➡️ for network calls such as HTTP requests, using different implementations for different platform behind a platform-independent interface.

UI backend:

➡️used for drawing basic widgets like combo boxes and windows. This backend exposes a generic interface that is not platform specific. Underneath it uses operating system user interface methods.

JavaScript interpreter:

➡️ Used to parse and execute JavaScript code.

Data storage:

➡️This is a persistence layer. The browser may need to save all sorts of data locally, such as cookies. Browsers also support storage mechanisms such as localStorage, IndexedDB, WebSQL and FileSystem.

![browser components](https://user-images.githubusercontent.com/109233287/192469228-215e07dd-dc73-4b4c-a884-151de896a740.jpeg)

3)Rendering engine and its use:

➡️display of the requested contents on the browser screen is the responsibility of rendering engine. Rendering engine can display HTML and XML documents and images

➡️Different browsers use different rendering engines. Most popular browser Chrome uses "Blink" as rendering engine

➡️rendering engine will start getting the contents of the requested document from the networking layer. After that, this is the basic flow of the rendering engine:

![browser rendering engine](https://user-images.githubusercontent.com/109233287/192476455-d377c346-cb77-4773-b2bb-c902aecc66f7.png)

➡️Rendering engine converts HTML elements into DOM Nodes in a tree called Content tree

➡️Styling information together with visual instructions in the HTML will be used to create the render tree.

➡️After the construction of the render tree it goes through a "layout" process

➡️The next stage is painting - the render tree will be traversed and each node will be painted using the UI backend layer.

4)Parsers (HTML, CSS, etc):

➡️parsing results in creating a tree of nodes that represent the structure of the document.

HTML Parser:

➡️HTML parser parse the HTML markup into a parse tree.

➡️HTML parser parse the HTML markup into a parse tree.HTML cannot be parsed easily by conventional parsers, since its grammar is not context free.

DOM:
The output tree (the "parse tree") is a tree of DOM element and attribute nodes. DOM is short for Document Object Model. It is the object presentation of the HTML document and the interface of HTML elements to the outside world like JavaScript.

The root of the tree is the "Document" object.

The DOM has an almost one-to-one relation to the markup. For example:

        <html>
          <body>
              <p>
                 Hello World
              </p>
              <div> <img src="example.png"/></div>
          </body>
        </html>

This markup would be translated to the following DOM tree:
![F759C420-D5D7-43E9-ABC1-5608C86AD0EF](https://user-images.githubusercontent.com/109233287/192482279-03e4c574-44fb-417e-91d4-4e69c49f1b63.jpeg)

being Unable to use the regular parsing techniques, browsers create custom parsers for parsing HTML. The algorithm consists of two stages: tokenization and tree construction.

CSS parsing:

➡️unlike HTML, CSS is a context free grammar

WebKit CSS parser :

WebKit uses Flex and Bison parser generators to create parsers automatically from the CSS grammar files. As you recall from the parser introduction, Bison creates a bottom up shift-reduce parser. Firefox uses a top down parser written manually. In both cases each CSS file is parsed into a StyleSheet object. Each object contains CSS rules. The CSS rule objects contain selector and declaration objects and other objects corresponding to CSS grammar.

![5E72089D-85FF-4D1D-9642-12729F01CD31](https://user-images.githubusercontent.com/109233287/192485025-e688215e-c503-494e-a074-be3d567d4c84.jpeg)

5)The order of processing scripts and style sheets:

Scripts:

The model of the web is synchronous. Authors expect scripts to be parsed and executed immediately when the parser reaches a <script> tag. The parsing of the document halts until the script has been executed. If the script is external then the resource must first be fetched from the network - this is also done synchronously, and parsing halts until the resource is fetched. This was the model for many years and is also specified in HTML4 and 5 specifications. Authors can add the "defer" attribute to a script, in which case it will not halt document parsing and will execute after the document is parsed. HTML5 adds an option to mark the script as asynchronous so it will be parsed and executed by a different thread.

Speculative parsing:

Both WebKit and Firefox do this optimization. While executing scripts, another thread parses the rest of the document and finds out what other resources need to be loaded from the network and loads them. In this way, resources can be loaded on parallel connections and overall speed is improved. Note: the speculative parser only parses references to external resources like external scripts, style sheets and images: it doesn't modify the DOM tree - that is left to the main parser.

Style sheets:

Style sheets on the other hand have a different model. Conceptually it seems that since style sheets don't change the DOM tree, there is no reason to wait for them and stop the document parsing. There is an issue, though, of scripts asking for style information during the document parsing stage. If the style is not loaded and parsed yet, the script will get wrong answers and apparently this caused lots of problems. It seems to be an edge case but is quite common. Firefox blocks all scripts when there is a style sheet that is still being loaded and parsed. WebKit blocks scripts only when they try to access certain style properties that may be affected by unloaded style sheets.

6)Render tree construction:

➡️While the DOM tree is being constructed, the browser constructs another tree, the render tree. This tree is of visual elements in the order in which they will be displayed. It is the visual representation of the document. The purpose of this tree is to enable painting the contents in their correct order.

➡️A renderer knows how to lay out and paint itself and its children.

➡️The render tree relation to the DOM tree:

➡️The renderers correspond to DOM elements, but the relation is not one to one. Non-visual DOM elements will not be inserted in the render tree. An example is the "head" element. Also elements whose display value was assigned to "none" will not appear in the tree (whereas elements with "hidden" visibility will appear in the tree).

➡️There are DOM elements which correspond to several visual objects. These are usually elements with complex structure that cannot be described by a single rectangle. For example, the "select" element has three renderers: one for the display area, one for the drop down list box and one for the button. Also when text is broken into multiple lines because the width is not sufficient for one line, the new lines will be added as extra renderers.

➡️Another example of multiple renderers is broken HTML. According to the CSS spec an inline element must contain either only block elements or only inline elements. In the case of mixed content, anonymous block renderers will be created to wrap the inline elements.

![DD7D6903-E226-4BBB-96BD-0C86382757E9](https://user-images.githubusercontent.com/109233287/192486879-e9bdca7b-fae3-4abf-bdfc-523743abc784.jpeg)

7)Layout :

➡️When the renderer is created and added to the tree, it does not have a position and size. Calculating these values is called layout or reflow.

➡️Layout is a recursive process. It begins at the root renderer, which corresponds to the <html> element of the HTML document. Layout continues recursively through some or all of the frame hierarchy, computing geometric information for each renderer that requires it.

Types:

➡️Global and incremental layout

➡️Asynchronous and Synchronous layout

The layout process:

The layout usually has the following pattern:

1.Parent renderer determines its own width.

2.Parent goes over children and:

     ➡️Place the child renderer (sets its x and y).

     ➡️ Calls child layout if needed - they are dirty or we are in a global layout, or for some other reason - which calculates the child's height.

3.Parent uses children's accumulative heights and the heights of margins and padding to set its own height - this will be used by the parent renderer's parent.

4.Sets its dirty bit to false.

8)Painting :

➡️In the painting stage, the render tree is traversed and the renderer's "paint()" method is called to display content on the screen. Painting uses the UI infrastructure component.

Global and Incremental painting:

➡️Like layout, painting can also be global - the entire tree is painted - or incremental. In incremental painting, some of the renderers change in a way that does not affect the entire tree.

The painting order:

➡️The stacking order of a block renderer is:

    1.background color
    2.background image
    3.border
    4.children
    5.outline
